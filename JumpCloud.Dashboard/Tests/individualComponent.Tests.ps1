BeforeAll {
    Get-UDDashboard | Stop-UDDashboard
    $componenets = @(
        "system_agentVersion",
        "system_lastContact",
        "system_newSystems",
        "system_os",
        "system_version",
        "system_mfaStatus",
        "user_mfaStatus",
        "user_newUsers",
        "user_passwordChanges",
        "user_passwordExpirations",
        "user_privilegedUsers",
        "user_userStates",
        "associations_o365",
        "associations_gsuite",
        "associations_ldap",
        "associations_radius",
        "associations_useractivationstatus",
        "associations_syspolicy",
        "directoryinsights_systemCreateDelete",
        "directoryinsights_userCreateDelete",
        "directoryinsights_dailyUserPortalLoginAttempts",
        "directoryinsights_userGroupChanges",
        "directoryinsights_systemGroupChanges",
        "directoryinsights_dailyAdminConsoleLoginAttempts"
    )
    $testDashboard = Start-JCDashboard -JumpCloudAPIKey $TestOrgAPIKey -NoUpdate -Layout singleComponent -IncludeComponent $componenets -cycleInterval 3
    $Driver = Start-SeFirefox -Headless
    Enter-SeUrl "http://127.0.0.1:8003/" -Driver $Driver
    # Start-Sleep -s 20
    $waitTime = 300
}
Describe "Testing JumpCloud Individual Component Dashboard" {
    Context "Verify Dashboard is running" {
        It "Test that the dashboard is actually running" {
            # variable from setupDashboard.ps1
            $testDashboard.Running | Should -Be $true
        }
    }
    Context "Tests of individual components" {
        It "Test System Agent Version page is running"{
            $Element = Find-SeElement -Driver $Driver -Wait -Timeout $waitTime -TagName "system_agentVersion"
            $Element.Displayed | Should -Be $true
        }

    Context 'last cases' {
        It '<testDescription>' -TestCases @(
            @{ testDescription = 'all other cases'
                tag = @("associations_gsuite", "associations_ldap", "associations_o365")
                testnum = 0
            }
        ) {
            forEach ($item in $tag){
                # write-host("Testing: " + $item)
                $Element = Find-SeElement -Driver $Driver -Wait -Timeout $waitTime -TagName $item
                While ($Element.Displayed -eq $false) {
                    if ($Element.Displayed -eq $true){
                        break
                    }
                }
                $Element.Displayed | Should -Be $true
            }
        }
    }
        # TODO: Pester 5.1 should soon allow for autogenerated tests in for loops
        # The following tests are invalid as of Pester 5.0.2

        # BeforeEach{
        #     $pagename = @()
        #     $expected = $testDashboard.DashboardService.Dashboard.Pages
        # }
        # # For ($i=0; $i -lt $expected.Count; $i++){
        # #     $pagename += $expected[$i].Name
        # # }
        # # It "Verifies the requested pages exist in the dashboard object" {
        # #     For ($i = 0; $i -lt $expected.Count; $i++) {
        # #         $expected[$i].Name | Should -Be $pagename[$i]
        # #     }
        # # }
        # ForEach ($test in $expected) {
        #     $testname = $test.Name
        #     It "Verify the individualComponent: $testname is displayed" {
        #         $Element = Find-SeElement -Driver $Driver -Wait -Timeout $waitTime -TagName $test.Name
        #         If ($Element -ne $null) {
        #             $Capture = $Element
        #             break
        #         }
        #         # $Element = Find-SeElement -Driver $Driver -Wait -Timeout $waitTime -TagName $expected[$i].Name
        #         $Capture.Displayed | Should -Be $true
        #     }
        # }
    }
    AfterAll {
        Stop-SeDriver $Driver
        Get-UDDashboard | Stop-UDDashboard
    }
}